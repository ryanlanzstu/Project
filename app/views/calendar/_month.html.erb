<p style="color: green"><%= notice %></p>

<div class="container">
  <div class="row">
    <div class="col-md-4 lists">
      <h2>Lists</h2>
      <div id="lists" class="sortable">
        <% if @lists.present? %>
          <% @lists.each do |list| %>
            <div class="list sticky-note" id="list-<%= list.id %>" data-list-id="<%= list.id %>">
              <h3><%= list.name %></h3>
              <div class="tasks sortable" id="tasks-list-<%= list.id %>" data-list-id="<%= list.id %>">
                <% list.tasks.each do |task| %>
                  <div class="task" id="task-<%= task.id %>" data-task-id="<%= task.id %>">
                    <%= task.name %>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        <% else %>
          <p>No lists found.</p>
        <% end %>
      </div>
    </div>

    <div class="col-md-8 calendar">
      <h1><%= @date.strftime('%B %Y') %></h1>
      <div class="grid grid-cols-7">
        <% Date::ABBR_DAYNAMES.rotate.each do |weekday| %>
          <div>
            <%= weekday %>
          </div>
        <% end %>
        <% @date.beginning_of_month.wday.times do %>
          <div></div>
        <% end %>
        <% @date.all_month.each do |day| %>
          <div class="border min-h-24 <%= "bg-blue-200" if day == Date.today %>">
            <div class="date"><%= day.strftime('%d') %></div>
            <div id="day-<%= day %>" class="task-dropzone" data-date="<%= day %>">
              <% @tasks.where("DATE(start_date) = ?", day).each do |task| %>
                <div class="task" id="task-<%= task.id %>" data-task-id="<%= task.id %>">
                  <%= task.name %>
                </div>
              <% end %>
              <% (@events[day] || []).each do |event| %>
                <div class="event bg-rose-200 rounded-md p-2 mt-1" id="event-<%= event.id %>">
                  <%= event.title %>
                </div>
              <% end %>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.10.2/Sortable.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize Sortable for task lists
    const lists = document.querySelectorAll('.tasks');

    lists.forEach(list => {
      new Sortable(list, {
        group: {
          name: 'tasks',
          pull: true,
          put: true
        },
        animation: 150,
        onEnd: function(evt) {
          const taskId = evt.item.id.split('-')[1]; // Extract task ID
          const newListId = evt.to.closest('.tasks').id.split('-')[2]; // Extract list ID
          const newIndex = evt.newIndex; // Get new index
          console.log(`Moved task ${taskId} to list ${newListId} at position ${newIndex}`);

          if (newListId) {
            fetch(`/tasks/${taskId}/sort`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({ list_id: newListId, row_order_position: newIndex })
            })
            .then(response => {
              if (!response.ok) {
                console.error(`Failed to update task ${taskId} to list ${newListId}`);
                throw new Error('Network response was not ok.');
              }
              return response.json();
            })
            .then(data => console.log('Task updated successfully:', data))
            .catch(error => console.error('Error:', error));
          }
        }
      });
    });

    // Initialize Sortable for calendar dropzones
    const dropzones = document.querySelectorAll('.task-dropzone');

    dropzones.forEach(dropzone => {
      new Sortable(dropzone, {
        group: 'tasks',
        animation: 150,
        onEnd: function(evt) {
          const taskId = evt.item.id.split('-')[1]; // Extract task ID
          const newDate = evt.to.dataset.date; // Use dataset attribute directly
          console.log(`Moved task ${taskId} to date ${newDate}`);

          fetch(`/tasks/${taskId}/update_date`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ date: newDate })
          })
          .then(response => {
            if (!response.ok) {
              console.error(`Failed to update task ${taskId} to date ${newDate}`);
              throw new Error('Network response was not ok.');
            }
            return response.json();
          })
          .then(data => console.log('Task date updated successfully:', data))
          .catch(error => console.error('Error:', error));
        }
      });
    });
  });
</script>
