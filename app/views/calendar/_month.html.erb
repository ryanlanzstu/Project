<p style="color: green"><%= notice %></p>

<div class="container">
  <div class="lists">
    <h2>Lists</h2>
    <div id="lists" class="sortable" data-controller="sortable" data-sortable-group-value="lists">
      <% if @lists.present? %>
        <% @lists.each do |list| %>
          <div class="list sticky-note" data-id="<%= list.id %>" data-sortable-url="<%= sort_list_path(list) %>">
            <h3><%= list.name %></h3>
            <ul class="tasks sortable" data-list-id="<%= list.id %>" data-controller="sortable" data-sortable-group-value="tasks" data-sortable-url="/tasks/sort">
              <% list.tasks.each do |task| %>
                <li class="task" data-id="<%= task.id %>">
                  <%= task.name %>
                </li>
              <% end %>
            </ul>
          </div>
        <% end %>
      <% else %>
        <p>No lists found.</p>
      <% end %>
    </div>
  </div>

  <div class="calendar">
    <h1><%= @date.strftime('%B %Y') %></h1>
    <div class="grid grid-cols-7">
      <div>Mon</div>
      <div>Tue</div>
      <div>Wed</div>
      <div>Thu</div>
      <div>Fri</div>
      <div>Sat</div>
      <div>Sun</div>
      <% (1..@date.end_of_month.day).each do |day| %>
        <div class="border min-h-24">
          <div class="date"><%= day %></div>
          <div id="day-<%= @date.strftime('%Y-%m') %>-<%= '%02d' % day %>" class="task-dropzone sortable" data-controller="sortable" data-sortable-group-value="tasks" data-sortable-url="/tasks/update_date" data-date="<%= @date.strftime('%Y-%m') %>-<%= '%02d' % day %>">
            <ul>
              <% @tasks.each do |task| %>
                <% if task.start_date.present? && task.start_date.to_date == Date.new(@date.year, @date.month, day) %>
                  <li class="task" data-id="<%= task.id %>">
                    <%= task.name %>
                  </li>
                <% end %>
              <% end %>
            </ul>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  document.addEventListener('turbolinks:load', function() {
    const lists = document.querySelectorAll('#lists .tasks');

    lists.forEach(list => {
      new Sortable(list, {
        group: {
          name: 'tasks',
          pull: true,
          put: true
        },
        animation: 150,
        onEnd: function(evt) {
          const taskId = evt.item.dataset.id;
          const newListId = evt.to.closest('.tasks').dataset.listId;

          if (newListId) {
            fetch(`/tasks/${taskId}/sort`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({ list_id: newListId })
            });
          }
        }
      });
    });

    const dropzones = document.querySelectorAll('.task-dropzone');

    dropzones.forEach(dropzone => {
      new Sortable(dropzone, {
        group: {
          name: 'tasks',
          pull: true,
          put: true
        },
        animation: 150,
        onEnd: function(evt) {
          const taskId = evt.item.dataset.id;
          const newDate = evt.to.dataset.date;

          if (newDate) {
            fetch(`/tasks/${taskId}/update_date`, {
              method: 'PATCH',
              headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
              },
              body: JSON.stringify({ date: newDate })
            });
          }
        }
      });
    });
  });
</script>
